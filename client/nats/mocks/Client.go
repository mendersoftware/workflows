// Copyright 2023 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.9.6. DO NOT EDIT.

package mocks

import (
	context "context"

	nats "github.com/mendersoftware/workflows/client/nats"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() {
	_m.Called()
}

// CreateConsumer provides a mock function with given fields: consumerName, cfg
func (_m *Client) CreateConsumer(consumerName string, cfg nats.ConsumerConfig) error {
	ret := _m.Called(consumerName, cfg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, nats.ConsumerConfig) error); ok {
		r0 = rf(consumerName, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStream provides a mock function with given fields:
func (_m *Client) CreateStream() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsConnected provides a mock function with given fields:
func (_m *Client) IsConnected() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *Client) Publish(_a0 string, _a1 []byte) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StreamName provides a mock function with given fields:
func (_m *Client) StreamName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, consumerName, q
func (_m *Client) Subscribe(ctx context.Context, consumerName string, q chan<- []byte) (nats.Subscription, error) {
	ret := _m.Called(ctx, consumerName, q)

	var r0 nats.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string, chan<- []byte) nats.Subscription); ok {
		r0 = rf(ctx, consumerName, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, chan<- []byte) error); ok {
		r1 = rf(ctx, consumerName, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
