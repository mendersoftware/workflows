variables:
  DOCKER_REPOSITORY: mendersoftware/workflows # server; worker image defined in required jobs

stages:
  - test
  - build
  - publish

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-static.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-unittests.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-apidocs.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-docker-build.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

test:prepare_acceptance:
  stage: .pre
  image: docker
  services:
    - docker:19.03.5-dind
  before_script:
    - export WORKER_DOCKER_REPOSITORY="mendersoftware/workflows-worker"
  script:
    - docker build -f Dockerfile.acceptance-testing -t $DOCKER_REPOSITORY:prtest .
    - docker build -f Dockerfile.acceptance-testing.worker -t $WORKER_DOCKER_REPOSITORY:prtest .
    - docker save $DOCKER_REPOSITORY:prtest > prtest_image.tar
    - docker save $WORKER_DOCKER_REPOSITORY:prtest > prtest_worker_image.tar
  artifacts:
    expire_in: 2w
    paths:
      - prtest_image.tar
      - prtest_worker_image.tar

test:static:
  image: golang:1.14

test:unit:
  image: golang:1.14
  services:
    - mongo:4.4
  variables:
    WORKFLOWS_MONGO_URL: "mongodb://mongo"

test:acceptance_tests:
  stage: test
  tags:
    - docker
  image: tiangolo/docker-with-compose
  services:
    - docker:19.03.5-dind
  dependencies:
    - test:prepare_acceptance
  before_script:
    - docker load -i prtest_image.tar
    - docker load -i prtest_worker_image.tar
  script:
    - make acceptance-testing-up
    - sh -c "sleep 30"
    - make acceptance-testing-run
  after_script:
    - make acceptance-testing-logs
    - make acceptance-testing-down
  artifacts:
    expire_in: 2w
    paths:
      - tests/coverage-acceptance.txt
      - tests/coverage-acceptance-worker.txt

# workflows (server) is built and published by the template; specify
# jobs only for the worker
build:docker:worker:
  extends: build:docker
  variables:
    DOCKER_REPOSITORY: mendersoftware/workflows-worker
    DOCKERFILE: Dockerfile.worker

publish:image:worker:
  extends: publish:image
  needs:
    - job: build:docker:worker
      artifacts: true
  variables:
    DOCKER_REPOSITORY: mendersoftware/workflows-worker

publish:image:mender:worker:
  extends: publish:image:mender
  needs:
    - job: build:docker:worker
      artifacts: true
  variables:
    DOCKER_REPOSITORY: mendersoftware/workflows-worker

publish:acceptance:
  stage: publish
  except:
    - /^saas-[a-zA-Z0-9.]+$/
  image: golang:1.14-alpine3.11
  dependencies:
    - test:acceptance_tests
  before_script:
    - apk add --no-cache git
    # Run go get out of the repo to not modify go.mod
    - cd / && go get github.com/mattn/goveralls && cd -
    # Coveralls env variables:
    #  According to https://docs.coveralls.io/supported-ci-services
    #  we should set CI_NAME, CI_BUILD_NUMBER, etc. But according
    #  to goveralls source code (https://github.com/mattn/goveralls)
    #  many of these are not supported. Set CI_BRANCH, CI_PR_NUMBER,
    #  and pass few others as command line arguments.
    #  See also https://docs.coveralls.io/api-reference
    - export CI_BRANCH=${CI_COMMIT_BRANCH}
    - export CI_PR_NUMBER=${CI_COMMIT_BRANCH#pr_}
  script:
    - goveralls
      -repotoken ${COVERALLS_TOKEN}
      -service gitlab-ci
      -jobid $CI_PIPELINE_ID
      -covermode set
      -flagname acceptance
      -parallel
      -coverprofile ./tests/coverage-acceptance.txt
    - goveralls
      -repotoken ${COVERALLS_TOKEN}
      -service gitlab-ci
      -jobid $CI_PIPELINE_ID
      -covermode set
      -flagname acceptance-worker
      -parallel
      -coverprofile ./tests/coverage-acceptance-worker.txt
